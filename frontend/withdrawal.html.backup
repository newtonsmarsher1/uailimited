<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title data-translate="withdrawal-title">Withdraw</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      background: linear-gradient(135deg, #2979ff 0%, #ad7ce6 100%);
      margin: 0; padding: 0;
      min-height: 100vh;
      display: flex; flex-direction: column; align-items: center;
    }
    .container {
      background: rgba(255,255,255,0.95);
      margin-top: 60px;
      padding: 36px 24px 28px 24px;
      border-radius: 22px;
      max-width: 420px;
      width: 95vw;
      box-shadow: 0 2px 24px #ad7ce62a;
      text-align: center;
      position: relative;
    }
    .uai-logo {
      position: absolute;
      left: 50%; top: -38px;
      transform: translateX(-50%);
      width: 70px; height: 70px;
      border-radius: 50%;
      background: linear-gradient(135deg, #ad7ce6 0%, #2979ff 100%);
      display: flex; align-items: center; justify-content: center;
      box-shadow: 0 2px 18px #7a09c555;
      border: 4px solid #fff;
    }
    .uai-logo span {
      color: #fff;
      font-size: 2em;
      font-weight: 800;
      letter-spacing: 3px;
      text-shadow: 0 2px 8px #7a09c577, 0 0 2px #4f2b7c;
    }
    h2 { color: #2979ff; margin-bottom: 1.25em;}
    .amount-grid {
      display: flex; flex-wrap: wrap; gap: 16px; justify-content: center; margin-bottom: 22px;
    }
    .amount-btn {
      background: linear-gradient(90deg, #2979ff 0%, #ad7ce6 100%);
      color: #fff; border: none; border-radius: 14px; font-size: 1.1em;
      padding: 13px 22px; font-weight: 700; cursor: pointer; transition: background .18s;
      margin-bottom: 4px;
      min-width: 90px;
      box-shadow: 0 2px 10px #ad7ce655;
      outline: none;
    }
    .amount-btn:active, .amount-btn.selected {
      background: linear-gradient(90deg, #ad7ce6 0%, #2979ff 100%);
      color: #fffb88;
      box-shadow: 0 0px 15px #2979ff55;
    }
    .bind-details-link {
      display: inline-block;
      margin-bottom: 16px;
      color: #ad7ce6;
      background: #e3f0ff;
      font-weight: 700;
      text-decoration: none;
      border-radius: 11px;
      padding: 8px 16px;
      border: 1px solid #ad7ce6;
      transition: background .13s, color .13s;
      font-size: 1em;
    }
    .bind-details-link:hover {
      background: #ad7ce6;
      color: #fff;
    }
    .input-group {
      margin-bottom: 18px; text-align:left;
    }
    label { display: block; margin-bottom: 0.35em; color: #ad7ce6; font-weight: 600;}
    input[type="password"] {
      width: 100%; padding: 10px 8px; border-radius: 9px; border: 1px solid #ad7ce6;
      font-size: 1em; margin-bottom: 0.7em; box-sizing: border-box;
    }
    .withdraw-btn {
      background: linear-gradient(90deg, #2979ff 0%, #ad7ce6 100%);
      color: #fff; border: none; border-radius: 14px; font-size: 1.09em;
      padding: 13px 22px; font-weight: 700; cursor: pointer; transition: background .18s;
      min-width: 110px;
      outline: none;
      margin-bottom: 8px;
      box-shadow: 0 2px 10px #ad7ce655;
    }
    .withdraw-btn:active { background: #1565c0; }
    .check-status-btn {
      background: linear-gradient(90deg, #ff9800 0%, #ff5722 100%);
      color: #fff; border: none; border-radius: 14px; font-size: 1.09em;
      padding: 13px 22px; font-weight: 700; cursor: pointer; transition: background .18s;
      min-width: 110px;
      outline: none;
      margin-bottom: 8px;
      box-shadow: 0 2px 10px #ff980055;
    }
    .check-status-btn:active { background: #e65100; }
    
    .withdrawal-records-btn {
      background: linear-gradient(90deg, #4caf50 0%, #2e7d32 100%);
      color: #fff; border: none; border-radius: 14px; font-size: 1.09em;
      padding: 13px 22px; font-weight: 700; cursor: pointer; transition: background .18s;
      min-width: 110px;
      outline: none;
      margin-bottom: 8px;
      box-shadow: 0 2px 10px #4caf5055;
    }
    .withdrawal-records-btn:active { background: #1b5e20; }
    .message { margin-top: 1.2em; color: #c62828; font-weight: 600; min-height: 24px;}
    .withdraw-note {
      color: #ad7ce6;
      margin-bottom: 12px;
      font-size: 1.01em;
      font-style: italic;
    }
    .forgot-pin-link {
      color: #ad7ce6;
      text-decoration: underline;
      font-size: 0.9em;
      cursor: pointer;
      margin-top: 10px;
      display: block;
    }
    
    /* Warning Message Styles */
    .warning-message {
      background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
      border: 2px solid #f39c12;
      border-radius: 12px;
      padding: 16px;
      margin: 20px 0;
      display: flex;
      align-items: flex-start;
      gap: 12px;
      box-shadow: 0 2px 8px rgba(243, 156, 18, 0.2);
    }
    
    .warning-icon {
      font-size: 1.5em;
      flex-shrink: 0;
      margin-top: 2px;
    }
    
    .warning-text {
      color: #856404;
      font-size: 0.95em;
      line-height: 1.4;
      text-align: left;
    }
    
    .warning-text strong {
      color: #d68910;
      font-weight: 700;
    }
    
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0,0,0,0.5);
      z-index: 3000;
      display: none;
      align-items: center;
      justify-content: center;
    }
    .modal-content {
      background: #fff;
      border-radius: 18px;
      max-width: 320px;
      width: 90%;
      padding: 32px 20px;
      text-align: center;
      box-shadow: 0 4px 32px rgba(0,0,0,0.3);
      margin: 20px;
    }
    .modal-emoji {
      font-size: 3em;
      margin-bottom: 15px;
    }
    .modal-title {
      font-size: 1.3em;
      font-weight: 700;
      margin-bottom: 10px;
    }
    .modal-message {
      font-size: 1.1em;
      margin-bottom: 20px;
      line-height: 1.4;
    }
    .modal-button {
      background: #2979ff;
      color: #fff;
      border: none;
      border-radius: 12px;
      padding: 12px 28px;
      font-size: 1.1em;
      font-weight: 700;
      cursor: pointer;
      transition: background 0.2s;
    }
    .modal-button:hover {
      background: #1565c0;
    }
    @media (max-width:600px) {
      .container { padding: 23px 5vw 19px 5vw; }
      .uai-logo { width: 48px; height: 48px; top: -28px; }
      .uai-logo span { font-size: 1.15em;}
      h2 { font-size: 1.1em;}
      .modal-content { max-width: 280px; padding: 28px 16px; }
      .modal-emoji { font-size: 2.5em; }
      .modal-title { font-size: 1.2em; }
      .modal-message { font-size: 1em; }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="uai-logo"><span>UAI</span></div>
    <h2 data-translate="withdrawal-title">Withdraw Funds</h2>
    <a href="binddetails.html" class="bind-details-link">‚ö†Ô∏è Bind Withdrawal Details</a>
    <div class="withdraw-note">
      üí° <strong>Withdrawal Restrictions:</strong><br>
      ‚Ä¢ One withdrawal per day<br>
      ‚Ä¢ Available 8:00 AM - 4:00 PM only<br>
      ‚Ä¢ Closed on Sundays and public holidays<br>
      ‚Ä¢ Closed on second Tuesday of every month (auditing day)<br>
      ‚Ä¢ KES 300+ requires at least 1 referral<br>
      ‚Ä¢ KES 1200+ requires at least 2 referrals
    </div>
    
    <button type="button" class="check-status-btn" onclick="openWithdrawalStatus()">
      üîç Check Status
    </button>
    
    <button type="button" class="withdrawal-records-btn" onclick="openWithdrawalRecords()">
      üìã Withdrawal Records
    </button>
    
    <form id="withdrawForm">
      <div class="tax-notice" style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 12px; margin-bottom: 20px; text-align: center;">
        <div style="color: #856404; font-weight: 600; margin-bottom: 5px;">üí∞ Tax Information</div>
        <div style="color: #856404; font-size: 0.9em;">A 10% tax will be deducted from your withdrawal. 90% will be credited to your account.</div>
      </div>
      <div class="amount-grid" id="amountGrid"></div>
      <div class="input-group">
        <label for="withdraw-pin">Withdrawal PIN</label>
        <input type="password" id="withdraw-pin" maxlength="4" pattern="\d*" placeholder="Enter your withdrawal PIN" required>
      </div>
      
      <!-- Warning Message -->
      <div class="warning-message">
        <div class="warning-icon">‚ö†Ô∏è</div>
        <div class="warning-text">
          <strong>Important:</strong> Do not keep or call financial manager numbers. 
          All communications should be done through the official UAI platform only.
        </div>
      </div>
      
      <button type="submit" class="withdraw-btn">Withdraw</button>
    </form>
    <div class="message" id="message"></div>
    <a class="forgot-pin-link" onclick="showForgotPinModal()">üîê Forgot PIN?</a>
  </div>

  <!-- Modal for notifications -->
  <div id="notification-modal" class="modal-overlay">
    <div class="modal-content">
      <div id="modal-emoji" class="modal-emoji">üéâ</div>
      <div id="modal-title" class="modal-title">Success!</div>
      <div id="modal-message" class="modal-message">Your withdrawal request has been submitted.</div>
      <button id="modal-button" class="modal-button" onclick="hideModal()">OK</button>
    </div>
  </div>

  <!-- Forgot PIN Modal -->
  <div id="forgot-pin-modal" class="modal-overlay">
    <div class="modal-content">
      <div class="modal-emoji">üîê</div>
      <div class="modal-title">Reset Withdrawal PIN</div>
      <div class="modal-message">Enter your account password to reset your withdrawal PIN.</div>
      <div class="input-group">
        <label for="accountPassword">Account Password</label>
        <input type="password" id="accountPassword" placeholder="Enter your account password">
      </div>
      <div class="input-group">
        <label for="newPin">New Withdrawal PIN</label>
        <input type="password" id="newPin" maxlength="4" pattern="\d*" placeholder="Enter new 4-digit PIN">
      </div>
      <button class="modal-button" onclick="resetPin()">Reset PIN</button>
      <button class="modal-button" onclick="hideForgotPinModal()" style="background: #e53935; margin-top: 10px;">Cancel</button>
    </div>
  </div>

  <script>
    const withdrawalOptions = [300, 1200, 4000, 7000, 10000, 24000, 54000, 100000];
    const userToken = localStorage.getItem('token');
    const amountGrid = document.getElementById('amountGrid');
    let selectedAmount = null;
    let selectedBtn = null;

    // Check authentication
    function checkAuth() {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = 'index.html';
        return false;
      }
      return true;
    }

    // Check referral requirement based on selected amount
    async function checkReferralRequirement(amount) {
      try {
        const response = await fetch('/api/user/invitation-users', {
          headers: {
            'Authorization': 'Bearer ' + userToken
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          const totalReferrals = data.totalInvited;
          
          if (amount >= 1200) {
            // 1200 and above: need at least 2 referrals
            if (totalReferrals < 2) {
              updateWithdrawalStatus(`‚ö†Ô∏è To withdraw KES ${amount}+, you need at least 2 referrals. You have ${totalReferrals} referral${totalReferrals === 1 ? '' : 's'}.`, 'warning');
              return false;
            }
          } else if (amount >= 300) {
            // 300 and above: need at least 1 referral
            if (totalReferrals < 1) {
              updateWithdrawalStatus(`‚ö†Ô∏è To withdraw KES ${amount}+, you need at least 1 referral. You have ${totalReferrals} referrals.`, 'warning');
              return false;
            }
          }
        }
      } catch (error) {
        console.error('Error checking referral requirement:', error);
      }
      return true;
    }

    // Open withdrawal status page
    function openWithdrawalStatus() {
      window.location.href = 'withdrawal-status.html';
    }

    // Open withdrawal records page
    function openWithdrawalRecords() {
      window.location.href = 'withdrawal-records.html';
    }

    // Check authentication
    function checkAuth() {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = 'index.html';
        return false;
      }
      return true;
    }

    // Check binding status and update UI
    async function checkBindingStatus() {
      try {
        const token = localStorage.getItem('token');
        const res = await fetch('/api/user/binding-status', {
          headers: { Authorization: "Bearer " + token }
        });
        
        if (res.ok) {
          const data = await res.json();
          const bindLink = document.querySelector('.bind-details-link');
          
          if (data.isBound) {
            // Update the link text to show details are bound
            bindLink.textContent = '‚úÖ Details Bound';
            bindLink.style.background = '#e8f5e8';
            bindLink.style.color = '#2e7d32';
            bindLink.style.borderColor = '#2e7d32';
          } else {
            // Show warning if details not bound
            bindLink.textContent = '‚ö†Ô∏è Bind Withdrawal Details';
            bindLink.style.background = '#fff3cd';
            bindLink.style.color = '#856404';
            bindLink.style.borderColor = '#856404';
          }
        }
      } catch (error) {
        console.error('Error checking binding status:', error);
      }
    }
    
    // Check withdrawal availability and update UI
    async function checkWithdrawalAvailability() {
      const now = new Date();
      const currentHour = now.getHours();
      const currentMinute = now.getMinutes();
      const currentTime = currentHour * 60 + currentMinute;
      const startTime = 8 * 60; // 8:00 AM
      const endTime = 16 * 60; // 4:00 PM
      const dayOfWeek = now.getDay();
      
      // Check if it's Sunday
      if (dayOfWeek === 0) {
        updateWithdrawalStatus('‚ùå Withdrawals closed on Sundays', 'error');
        return false;
      }
      
      // Check if it's the second Tuesday of the month
      const isSecondTuesday = (() => {
        const date = now.getDate();
        const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1).getDay();
        const secondTuesdayDate = (2 - firstDayOfMonth + 7) % 7 + 8;
        return dayOfWeek === 2 && date === secondTuesdayDate;
      })();
      
      if (isSecondTuesday) {
        updateWithdrawalStatus('‚ùå Withdrawals closed on second Tuesday (auditing day)', 'error');
        return false;
      }
      
      // Check public holidays
      const publicHolidays = [
        '2024-01-01', '2024-01-02', '2024-04-01', '2024-05-01', '2024-06-01', '2024-06-16',
        '2024-10-10', '2024-10-20', '2024-12-12', '2024-12-25', '2024-12-26',
        '2025-01-01', '2025-04-21', '2025-05-01', '2025-06-01', '2025-10-10',
        '2025-10-20', '2025-12-12', '2025-12-25', '2025-12-26'
      ];
      
      const todayDate = now.toISOString().split('T')[0];
      if (publicHolidays.includes(todayDate)) {
        updateWithdrawalStatus('‚ùå Withdrawals closed on public holiday', 'error');
        return false;
      }
      
      // Check time restrictions
      if (currentTime < startTime) {
        const timeUntilOpen = startTime - currentTime;
        const hoursUntilOpen = Math.floor(timeUntilOpen / 60);
        const minutesUntilOpen = timeUntilOpen % 60;
        updateWithdrawalStatus(`‚è∞ Withdrawals open at 8:00 AM (${hoursUntilOpen}h ${minutesUntilOpen}m remaining)`, 'warning');
        return false;
      } else if (currentTime >= endTime) {
        updateWithdrawalStatus('‚è∞ Withdrawals closed for today (opens tomorrow at 8:00 AM)', 'warning');
        return false;
      }
      
      // Check if user has already withdrawn today
      const hasWithdrawnToday = localStorage.getItem('withdrawnToday') === todayDate;
      if (hasWithdrawnToday) {
        updateWithdrawalStatus('‚úÖ Already withdrawn today (limit: 1 per day)', 'info');
        return false;
      }
      
      // Check referral requirement based on selected amount (if any)
      if (selectedAmount) {
        const referralCheck = await checkReferralRequirement(selectedAmount);
        if (!referralCheck) {
          return false;
        }
      }
      
      // All checks passed
      updateWithdrawalStatus('‚úÖ Withdrawals available now', 'success');
      return true;
    }
    
    // Update withdrawal status display
    function updateWithdrawalStatus(message, type) {
      let statusElement = document.getElementById('withdrawal-status');
      if (!statusElement) {
        statusElement = document.createElement('div');
        statusElement.id = 'withdrawal-status';
        statusElement.style.cssText = `
          margin: 10px 0;
          padding: 10px;
          border-radius: 8px;
          font-weight: 600;
          text-align: center;
          font-size: 0.9em;
        `;
        document.querySelector('.container').insertBefore(statusElement, document.getElementById('withdrawForm'));
      }
      
      statusElement.textContent = message;
      
      // Set color based on type
      switch (type) {
        case 'success':
          statusElement.style.background = '#d4edda';
          statusElement.style.color = '#155724';
          statusElement.style.border = '1px solid #c3e6cb';
          break;
        case 'warning':
          statusElement.style.background = '#fff3cd';
          statusElement.style.color = '#856404';
          statusElement.style.border = '1px solid #ffeaa7';
          break;
        case 'error':
          statusElement.style.background = '#f8d7da';
          statusElement.style.color = '#721c24';
          statusElement.style.border = '1px solid #f5c6cb';
          break;
        case 'info':
          statusElement.style.background = '#d1ecf1';
          statusElement.style.color = '#0c5460';
          statusElement.style.border = '1px solid #bee5eb';
          break;
      }
    }

    function showModal(type, message) {
      const modal = document.getElementById('notification-modal');
      const emoji = document.getElementById('modal-emoji');
      const title = document.getElementById('modal-title');
      const msg = document.getElementById('modal-message');
      const button = document.getElementById('modal-button');
      
      if (type === 'error') {
        emoji.textContent = 'üò¢';
        title.textContent = 'Error!';
        title.style.color = '#e53935';
        button.style.background = '#e53935';
      } else {
        emoji.textContent = 'üéâ';
        title.textContent = 'Success!';
        title.style.color = '#2979ff';
        button.style.background = '#2979ff';
      }
      
      msg.textContent = message;
      modal.style.display = 'flex';
    }

    function hideModal() {
      document.getElementById('notification-modal').style.display = 'none';
    }

    function showForgotPinModal() {
      document.getElementById('forgot-pin-modal').style.display = 'flex';
    }

    function hideForgotPinModal() {
      document.getElementById('forgot-pin-modal').style.display = 'none';
      document.getElementById('accountPassword').value = '';
      document.getElementById('newPin').value = '';
    }

    async function resetPin() {
      const password = document.getElementById('accountPassword').value;
      const newPin = document.getElementById('newPin').value;
      
      console.log('üîê Reset PIN request:', { 
        password: password ? '***' : 'missing', 
        newPin: newPin ? '***' : 'missing' 
      });
      
      if (!password || !newPin) {
        showModal('error', 'Please enter both password and new PIN');
        return;
      }
      
      if (newPin.length !== 4 || !/^\d+$/.test(newPin)) {
        showModal('error', 'PIN must be 4 digits');
        return;
      }

      try {
        const token = localStorage.getItem('token');
        console.log('üîë Token available:', !!token);
        
        const res = await fetch('/api/user/reset-withdrawal-pin', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + token
          },
          body: JSON.stringify({ password, newPin })
        });

        const data = await res.json();
        console.log('üì° Response status:', res.status);
        console.log('üìÑ Response data:', data);
        
        if (!res.ok) {
          showModal('error', data.error || 'Failed to reset PIN');
          return;
        }

        showModal('success', 'Withdrawal PIN reset successfully!');
        hideForgotPinModal();
        
      } catch (error) {
        console.error('‚ùå Error resetting PIN:', error);
        showModal('error', 'Network error! Please try again.');
      }
    }

    withdrawalOptions.forEach(amount => {
      const btn = document.createElement('button');
      btn.type = "button";
      btn.className = 'amount-btn';
      btn.textContent = 'KES ' + amount;
      btn.onclick = async function() {
        if (selectedBtn) selectedBtn.classList.remove('selected');
        btn.classList.add('selected');
        selectedBtn = btn;
        selectedAmount = amount;
        
        // Check referral requirement for the selected amount
        await checkReferralRequirement(amount);
      };
      amountGrid.appendChild(btn);
    });

    document.getElementById('withdrawForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Check withdrawal availability first
      if (!(await checkWithdrawalAvailability())) {
        showModal('error', 'Withdrawal is not available at this time. Please check the status above.');
        return;
      }
      
      if (!selectedAmount) {
        showModal('error', 'Please select a withdrawal amount.');
        return;
      }
      const pin = document.getElementById('withdraw-pin').value.trim();
      if (!pin) {
        showModal('error', 'Please enter your withdrawal PIN.');
        return;
      }
      
      try {
        const res = await fetch('/api/payments/withdraw', {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + userToken
          },
          body: JSON.stringify({ amount: selectedAmount, pin })
        });
        const data = await res.json();
        
        if (!res.ok) {
          showModal('error', data.error || 'Withdrawal failed');
          return;
        }

        // Track successful withdrawal for today
        const today = new Date().toISOString().split('T')[0];
        localStorage.setItem('withdrawnToday', today);
        
        showModal('success', data.message || 'Withdrawal request submitted successfully!');
        document.getElementById('withdraw-pin').value = '';
        if (selectedBtn) selectedBtn.classList.remove('selected');
        selectedAmount = null;
        selectedBtn = null;
        
        // Update withdrawal status after successful withdrawal
        setTimeout(async () => {
          await checkWithdrawalAvailability();
        }, 1000);
        
      } catch (error) {
        console.error('Error:', error);
        showModal('error', 'Network error! Please try again.');
      }
    });

    document.addEventListener("DOMContentLoaded", async function() {
      if (!checkAuth()) return;
      checkBindingStatus();
      await checkWithdrawalAvailability();
      
      // Update withdrawal status every minute
      setInterval(async () => {
        await checkWithdrawalAvailability();
      }, 60000);
      
      // Initialize language manager immediately
      (async function() {
        // Load language manager
        const script = document.createElement('script');
        script.src = 'js/language-manager.js';
        document.head.appendChild(script);
        
        script.onload = async function() {
          if (window.languageManager) {
            await window.languageManager.init();
            console.log('üåç Language manager loaded and initialized on withdrawal page');
          }
        };
      })();
    });
  </script>
</body>
</html>