const express = require('express');
const pool = require('../config/database.js');
const { pushNotification } = require('../services/notificationService.js');
const { simpleAuth } = require('../middleware/auth-simple.js');

const router = express.Router();

// Get random HR manager for recharge method 1
router.get('/random-hr-manager', async (req, res) => {
  try {
    // Get a random Financial Manager from the admin_users table with complete details
    const [hrManagers] = await pool.query(`
      SELECT id, name, mobile as phone, bank_name, account_number, branch, swift_code, reference_code, is_ceo_added
      FROM admin_users
      WHERE role = 'Financial Manager' AND is_active = 1 AND name IS NOT NULL AND mobile IS NOT NULL
      ORDER BY RAND()
      LIMIT 1
    `);
    
    if (hrManagers.length > 0) {
      const hrManager = hrManagers[0];
      res.json({
        success: true,
        admin: {
          name: hrManager.name,
          phone: hrManager.phone,
          bankName: hrManager.bank_name,
          accountNumber: hrManager.account_number,
          branch: hrManager.branch,
          swiftCode: hrManager.swift_code,
          referenceCode: hrManager.reference_code
        }
      });
    } else {
      res.json({
        success: false,
        message: 'No HR managers available'
      });
    }
  } catch (error) {
    console.error('Error fetching random HR manager:', error);
    res.status(500).json({
      success: false,
      message: 'Error fetching HR manager details'
    });
  }
});

// Get payment status
router.get('/status/:transactionNumber', simpleAuth, async (req, res) => {
  try {
    const { transactionNumber } = req.params;
    
    const [payments] = await pool.query(`
      SELECT status, verification_message, processed_at
      FROM payments
      WHERE transaction_number = ? AND user_id = ?
    `, [transactionNumber, req.user.id]);
    
    if (payments.length === 0) {
      return res.status(404).json({ error: 'Payment not found' });
    }
    
    const payment = payments[0];
    res.json({
      status: payment.status,
      reason: payment.verification_message,
      processedAt: payment.processed_at
    });
  } catch (error) {
    console.error('Error fetching payment status:', error);
    res.status(500).json({ error: 'Failed to fetch payment status' });
  }
});

// Basic payment endpoint
router.post('/pay', simpleAuth, async (req, res) => {
  await pool.query('INSERT INTO payments (user_id, amount, status) VALUES (?, ?, ?)', [req.user.id, req.body.amount, 'pending']);
  pushNotification(req.user.id, "Recharge initiated. Please complete payment.", "info");
  res.json({ status: "pending", message: "Pay to mpesa 0114710035 and wait for confirmation." });
});

// Withdrawal request
router.post('/withdraw', simpleAuth, async (req, res) => {
  try {
    console.log('üîç Withdrawal request received:', {
      userId: req.user.id,
      body: req.body
    });

    const { amount, pin } = req.body;
    
    if (!amount || !pin) {
      console.log('‚ùå Missing required fields:', { amount, pin });
    }
    
    if (pin.length !== 4 || !/^\d+$/.test(pin)) {
      console.log('‚ùå Invalid PIN format:', pin);
    }
    
    // Check if user has bound withdrawal details
    const [user] = await pool.query(
      'SELECT wallet_balance, withdrawal_pin, pin_attempts, pin_locked_until, full_name, bank_type, account_number FROM users WHERE id = ?',
      [req.user.id]
    );
    
    if (!user.length) {
      console.log('‚ùå User not found:', req.user.id);
      return res.status(404).json({ error: 'User not found' });
    }
    
    const userData = user[0];
    console.log('üìä User data:', {
      wallet_balance: userData.wallet_balance,
      has_withdrawal_pin: !!userData.withdrawal_pin,
      has_binding: !!(userData.full_name && userData.bank_type && userData.account_number)
    });
    
    // Check if PIN is locked
    if (userData.pin_locked_until && new Date() < new Date(userData.pin_locked_until)) {
      const lockTime = new Date(userData.pin_locked_until);
      const remainingMinutes = Math.ceil((lockTime - new Date()) / (1000 * 60));
      console.log('‚ùå PIN is locked, remaining minutes:', remainingMinutes);
      return res.status(400).json({ 
        error: `PIN is locked. Please contact HR Manager or try again in ${remainingMinutes} minutes.` 
      });
    }
    
    // Check if user has bound withdrawal details
    if (!userData.full_name || !userData.bank_type || !userData.account_number) {
      console.log('‚ùå User has not bound withdrawal details');
      return res.status(400).json({ 
        error: 'Please bind your withdrawal details first. Go to Bind Withdrawal Details.' 
      });
    }
    
    // Check if user has withdrawal PIN set
    if (!userData.withdrawal_pin) {
      console.log('‚ùå User has not set withdrawal PIN');
      return res.status(400).json({ 
        error: 'Please set your withdrawal PIN first. Go to Bind Withdrawal Details.' 
      });
    }
    
    // Validate PIN
    const bcrypt = require('bcrypt');
    const isPinValid = await bcrypt.compare(pin, userData.withdrawal_pin);
    console.log('üîê PIN validation result:', isPinValid);
    
    if (!isPinValid) {
      // Increment failed attempts
      const newAttempts = (userData.pin_attempts || 0) + 1;
      console.log('‚ùå Invalid PIN, attempt:', newAttempts);
      
      if (newAttempts >= 5) {
        // Lock PIN for 30 minutes
        const lockUntil = new Date(Date.now() + 30 * 60 * 1000); // 30 minutes
        await pool.query(
          'UPDATE users SET pin_attempts=?, pin_locked_until=? WHERE id=?',
          [newAttempts, lockUntil, req.user.id]
        );
        
        return res.status(400).json({ 
          error: 'Too many failed attempts. PIN is locked for 30 minutes. Please contact HR Manager.' 
        });
      } else {
        // Update attempts count
        await pool.query(
          'UPDATE users SET pin_attempts=? WHERE id=?',
          [newAttempts, req.user.id]
        );
        
        const remainingAttempts = 5 - newAttempts;
        return res.status(400).json({ 
          error: `Invalid PIN. ${remainingAttempts} attempts remaining.` 
        });
      }
    }
    
    // Reset PIN attempts on successful validation
    await pool.query(
      'UPDATE users SET pin_attempts=0, pin_locked_until=NULL WHERE id=?',
      [req.user.id]
    );
    
    // Check withdrawal restrictions
    console.log('üîç Checking withdrawal restrictions...');
    
    // 1. Check if user has already withdrawn today
    const today = new Date().toISOString().split('T')[0];
    const [todayWithdrawals] = await pool.query(
      'SELECT COUNT(*) as count FROM withdrawals WHERE user_id = ? AND DATE(requested_at) = ?',
      [req.user.id, today]
    );
    
    if (todayWithdrawals[0].count > 0) {
      console.log('‚ùå User has already withdrawn today');
      return res.status(400).json({ 
        error: 'You can only withdraw once per day. Please try again tomorrow.' 
      });
    }
    
    // 2. Check current time (8:00 AM to 4:00 PM only)
    const now = new Date();
    const currentHour = now.getHours();
    const currentMinute = now.getMinutes();
    const currentTime = currentHour * 60 + currentMinute; // Convert to minutes
    const startTime = 8 * 60; // 8:00 AM in minutes
    const endTime = 16 * 60; // 4:00 PM in minutes
    
    if (currentTime < startTime || currentTime >= endTime) {
      console.log('‚ùå Withdrawal outside allowed hours:', currentHour + ':' + currentMinute);
      return res.status(400).json({ 
        error: 'Withdrawals are only allowed between 8:00 AM and 4:00 PM. Current time: ' + 
               now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true })
      });
    }
    
    // 3. Check if it's Sunday
    const dayOfWeek = now.getDay();
    if (dayOfWeek === 0) { // 0 = Sunday
      console.log('‚ùå Withdrawal attempted on Sunday');
      return res.status(400).json({ 
        error: 'Withdrawals are not allowed on Sundays. Please try again on Monday.' 
      });
    }
    
    // 4. Check if it's the second Tuesday of the month (auditing day)
    const isSecondTuesday = (() => {
      const date = now.getDate();
      const dayOfWeek = now.getDay();
      const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1).getDay();
      const secondTuesdayDate = (2 - firstDayOfMonth + 7) % 7 + 8; // Calculate second Tuesday
      return dayOfWeek === 2 && date === secondTuesdayDate; // Tuesday = 2
    })();
    
    if (isSecondTuesday) {
      console.log('‚ùå Withdrawal attempted on second Tuesday (auditing day)');
      return res.status(400).json({ 
        error: 'Withdrawals are not allowed on the second Tuesday of every month (auditing day). Please try again tomorrow.' 
      });
    }
    
    // 5. Check for public holidays (Kenya public holidays 2024-2025)
    const publicHolidays = [
      '2024-01-01', // New Year's Day
      '2024-01-02', // New Year's Day (observed)
      '2024-04-01', // Easter Monday
      '2024-05-01', // Labour Day
      '2024-06-01', // Madaraka Day
      '2024-06-16', // Eid al-Adha
      '2024-10-10', // Moi Day
      '2024-10-20', // Mashujaa Day
      '2024-12-12', // Jamhuri Day
      '2024-12-25', // Christmas Day
      '2024-12-26', // Boxing Day
      '2025-01-01', // New Year's Day
      '2025-04-21', // Easter Monday
      '2025-05-01', // Labour Day
      '2025-06-01', // Madaraka Day
      '2025-10-10', // Moi Day
      '2025-10-20', // Mashujaa Day
      '2025-12-12', // Jamhuri Day
      '2025-12-25', // Christmas Day
      '2025-12-26'  // Boxing Day
    ];
    
    const todayDate = now.toISOString().split('T')[0];
    if (publicHolidays.includes(todayDate)) {
      console.log('‚ùå Withdrawal attempted on public holiday:', todayDate);
      return res.status(400).json({ 
        error: 'Withdrawals are not allowed on public holidays. Please try again tomorrow.' 
      });
    }
    
    
    const [referralCount] = await pool.query(`
      SELECT COUNT(*) as count 
      FROM users 
      WHERE referred_by = ?
    `, [req.user.id]);
    
    
    if (amount >= 1200) {
      // 1200 and above: need at least 2 referrals
        return res.status(400).json({ 
        });
      }
      // 300 and above: need at least 1 referral
        return res.status(400).json({ 
        });
      }
    }
    
    console.log('‚úÖ All withdrawal restrictions passed');
    
    // Check balance
    if (userData.wallet_balance < amount) {
      console.log('‚ùå Insufficient balance:', userData.wallet_balance, '<', amount);
    }
    
    console.log('‚úÖ All validations passed, processing withdrawal...');
    
    // Calculate 90% for admin display (10% tax)
    const adminDisplayAmount = Math.round(amount * 0.9 * 100) / 100; // Round to 2 decimal places
    const taxAmount = Math.round((amount - adminDisplayAmount) * 100) / 100;
    
    console.log(`üí∞ Withdrawal: User requests ${amount}, Admin sees ${adminDisplayAmount}, Tax ${taxAmount}`);
    
    // Process withdrawal - deduct full amount from wallet and update total_withdrawn with full amount
    await pool.query(
      'UPDATE users SET wallet_balance = wallet_balance - ?, total_withdrawn = total_withdrawn + ? WHERE id = ?', 
      [amount, amount, req.user.id]
    );
    
    console.log('‚úÖ Balance deducted and total_withdrawn updated with full amount');
    
    // Insert into withdrawals table with full amount (user receives full amount)
    const [withdrawalResult] = await pool.query(
      'INSERT INTO withdrawals (user_id, amount, status, requested_at) VALUES (?, ?, "pending", NOW())',
      [req.user.id, amount]
    );
    
    console.log('‚úÖ Withdrawal record created with full amount, ID:', withdrawalResult.insertId);
    
    // Also insert into payments table for admin portal visibility with admin display amount (90%)
    await pool.query(
      'INSERT INTO payments (user_id, amount, status, payment_method, description, created_at) VALUES (?, ?, "pending", "withdrawal", ?, NOW())',
      [req.user.id, adminDisplayAmount, `Withdrawal request for KES ${amount} (admin sees KES ${adminDisplayAmount} after 10% tax)`]
    );
    
    console.log('‚úÖ Payment record created for admin visibility with admin display amount');
    
    pushNotification(req.user.id, `Withdrawal request for KES ${amount} submitted. Await admin approval.`, "info");
    
    // Notify all admins about new withdrawal request with admin display amount
    const [admins] = await pool.query('SELECT id FROM users WHERE is_admin = 1');
    admins.forEach(admin => {
      pushNotification(admin.id, `New withdrawal request: KES ${adminDisplayAmount} from user ${req.user.id}`, "withdrawal_request");
    });
    
    console.log('‚úÖ Notifications sent with admin display amount');
    
    res.json({ status: "pending", message: "Withdrawal requested. Await admin approval.", userAmount: amount, adminAmount: adminDisplayAmount });
    
  } catch (error) {
    console.error('‚ùå Error processing withdrawal:', error);
    console.error('‚ùå Error stack:', error.stack);
    res.status(500).json({ error: 'Withdrawal failed' });
  }
});

// Get CEO-added financial details for recharge methods
router.get('/financial-details/:method', simpleAuth, async (req, res) => {
  try {
    const method = req.params.method;
    
    // Get CEO-added financial details for the specific method (random selection)
    const [details] = await pool.query(`
      SELECT id, name, mobile, bank_name, account_number, branch, swift_code, reference_code
      FROM admin_users 
      WHERE verified = 1 AND role = 'Financial Manager' AND rejected = 0 AND is_ceo_added = 1 AND payment_method = ?
      ORDER BY RAND()
      LIMIT 1
    `, [method]);
    
    if (!details.length) {
      return res.status(404).json({ error: 'No financial details available for this method' });
    }
    
    const detail = details[0];
    
    res.json({
      success: true,
      financialDetails: {
        name: detail.name,
        phone: detail.mobile,
        bankName: detail.bank_name,
        accountNumber: detail.account_number,
        branch: detail.branch,
        swiftCode: detail.swift_code,
        referenceCode: detail.reference_code
      }
    });
  } catch (error) {
    console.error('Error fetching financial details:', error);
    res.status(500).json({ error: 'Failed to fetch financial details' });
  }
});

// Recharge method endpoints
router.post('/recharge-method1', simpleAuth, async (req, res) => {
  try {
    console.log('üîç Recharge method 1 request received:', {
      userId: req.user.id,
      body: req.body
    });

    const { amount, phone, message } = req.body;
    
    if (!amount || !phone) {
      console.log('‚ùå Missing required fields:', { amount, phone });
    }
    
    // Validate amount
    if (isNaN(amount) || amount <= 0) {
      console.log('‚ùå Invalid amount:', amount);
    }
    
    // Get CEO-added financial details for method 1
    console.log('üîç Fetching financial details for method1...');
    const [financialDetails] = await pool.query(`
      SELECT id, name, mobile, bank_name, account_number, branch, swift_code, reference_code
      FROM admin_users 
      WHERE verified = 1 AND role = 'Financial Manager' AND rejected = 0 AND is_ceo_added = 1 AND payment_method = 'method1'
      ORDER BY RAND() 
      LIMIT 1
    `);
    
    console.log('üìä Financial details query result:', financialDetails);
    
    if (!financialDetails.length) {
      console.log('‚ùå No financial details found for method1');
      return res.status(500).json({ 
        error: 'No financial details available for Method 1. Please contact support.',
        details: 'No Financial Manager found with method1 payment method'
      });
    }
    
    const financialDetail = financialDetails[0];
    console.log('‚úÖ Financial manager found:', financialDetail.name);
    
    // Generate transaction number
    const transactionNumber = 'TXN' + Date.now() + Math.random().toString(36).substr(2, 5).toUpperCase();
    console.log('üî¢ Generated transaction number:', transactionNumber);
    
    // Create payment record with financial manager assignment
    console.log('üíæ Creating payment record...');
    const [paymentResult] = await pool.query(
      'INSERT INTO payments (user_id, amount, status, payment_method, hr_manager_id, transaction_number, user_phone, verification_message) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
      [req.user.id, amount, 'pending', 'financial_method1', financialDetail.id, transactionNumber, phone, message || '']
    );
    
    const paymentId = paymentResult.insertId;
    console.log('‚úÖ Payment record created with ID:', paymentId);
    
    // Create copy message
    const copyMessage = `Recharge Request - Transaction: ${transactionNumber} - Amount: KES ${amount} - Phone: ${phone}`;
    
    // Notify user
    try {
      await pushNotification(req.user.id, "Recharge request submitted via Method 1. Financial manager will process your payment.", "info");
      console.log('‚úÖ User notification sent');
    } catch (notificationError) {
      console.log('‚ö†Ô∏è User notification failed:', notificationError.message);
    }
    
    // Notify financial manager with verification message
    try {
      const notificationMessage = message 
        ? `New recharge request (Method 1): KES ${amount} from user ${req.user.id}. Verification message: "${message}"`
        : `New recharge request (Method 1): KES ${amount} from user ${req.user.id}`;
      await pushNotification(financialDetail.id, notificationMessage, "recharge_request");
      console.log('‚úÖ Financial manager notification sent');
    } catch (notificationError) {
      console.log('‚ö†Ô∏è Financial manager notification failed:', notificationError.message);
    }
    
    console.log('üéâ Recharge method 1 completed successfully');
    res.json({ 
      success: true,
      financialManagerName: financialDetail.name,
      transactionNumber: transactionNumber,
      copyMessage: copyMessage,
      paymentId: paymentId,
      message: "Payment is being processed. It will reflect soon on your wallet.",
      payment_method: "Financial Manager Assignment (Method 1)",
      financialDetails: {
        name: financialDetail.name,
        phone: financialDetail.mobile,
        bankName: financialDetail.bank_name,
        accountNumber: financialDetail.account_number,
        branch: financialDetail.branch,
        swiftCode: financialDetail.swift_code,
        referenceCode: financialDetail.reference_code
      }
    });
  } catch (error) {
    console.error('‚ùå Error processing recharge method 1:', error);
    console.error('‚ùå Error stack:', error.stack);
    res.status(500).json({ 
      error: 'Recharge failed',
      details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
});

router.post('/recharge-method2', simpleAuth, async (req, res) => {
  try {
    console.log('üîç Recharge method 2 request received:', {
      userId: req.user.id,
      body: req.body
    });

    const { amount, phone, message } = req.body;
    
    if (!amount || !phone) {
      console.log('‚ùå Missing required fields:', { amount, phone });
    }
    
    // Validate amount
    if (isNaN(amount) || amount <= 0) {
      console.log('‚ùå Invalid amount:', amount);
    }
    
    // Get CEO-added financial details for method 2
    console.log('üîç Fetching financial details for method2...');
    const [financialDetails] = await pool.query(`
      SELECT id, name, mobile, bank_name, account_number, branch, swift_code, reference_code
      FROM admin_users 
      WHERE verified = 1 AND role = 'Financial Manager' AND rejected = 0 AND is_ceo_added = 1 AND payment_method = 'method2'
      ORDER BY RAND() 
      LIMIT 1
    `);
    
    console.log('üìä Financial details query result:', financialDetails);
    
    if (!financialDetails.length) {
      console.log('‚ùå No financial details found for method2');
      return res.status(500).json({ 
        error: 'No financial details available for Method 2. Please contact support.',
        details: 'No Financial Manager found with method2 payment method'
      });
    }
    
    const financialDetail = financialDetails[0];
    console.log('‚úÖ Financial manager found:', financialDetail.name);
    
    // Generate transaction number
    const transactionNumber = 'TXN' + Date.now() + Math.random().toString(36).substr(2, 5).toUpperCase();
    console.log('üî¢ Generated transaction number:', transactionNumber);
    
    // Create payment record with financial manager assignment
    console.log('üíæ Creating payment record...');
    const [paymentResult] = await pool.query(
      'INSERT INTO payments (user_id, amount, status, payment_method, hr_manager_id, transaction_number, user_phone, verification_message) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
      [req.user.id, amount, 'pending', 'financial_method2', financialDetail.id, transactionNumber, phone, message || '']
    );
    
    const paymentId = paymentResult.insertId;
    console.log('‚úÖ Payment record created with ID:', paymentId);
    
    // Create copy message
    const copyMessage = `Recharge Request - Transaction: ${transactionNumber} - Amount: KES ${amount} - Phone: ${phone}`;
    
    // Notify user
    try {
      await pushNotification(req.user.id, "Recharge request submitted via Method 2. Financial manager will process your payment.", "info");
      console.log('‚úÖ User notification sent');
    } catch (notificationError) {
      console.log('‚ö†Ô∏è User notification failed:', notificationError.message);
    }
    
    // Notify financial manager with verification message
    try {
      const notificationMessage = message 
        ? `New recharge request (Method 2): KES ${amount} from user ${req.user.id}. Verification message: "${message}"`
        : `New recharge request (Method 2): KES ${amount} from user ${req.user.id}`;
      await pushNotification(financialDetail.id, notificationMessage, "recharge_request");
      console.log('‚úÖ Financial manager notification sent');
    } catch (notificationError) {
      console.log('‚ö†Ô∏è Financial manager notification failed:', notificationError.message);
    }
    
    console.log('üéâ Recharge method 2 completed successfully');
    res.json({ 
      success: true,
      financialManagerName: financialDetail.name,
      transactionNumber: transactionNumber,
      copyMessage: copyMessage,
      paymentId: paymentId,
      message: "Payment is being processed. It will reflect soon on your wallet.",
      payment_method: "Financial Manager Assignment (Method 2)",
      financialDetails: {
        name: financialDetail.name,
        phone: financialDetail.mobile,
        bankName: financialDetail.bank_name,
        accountNumber: financialDetail.account_number,
        branch: financialDetail.branch,
        swiftCode: financialDetail.swift_code,
        referenceCode: financialDetail.reference_code
      }
    });
  } catch (error) {
    console.error('Error processing recharge method 2:', error);
    res.status(500).json({ error: 'Recharge failed' });
  }
});

router.post('/recharge-method3', simpleAuth, async (req, res) => {
  try {
    console.log('üîç Recharge method 3 request received:', {
      userId: req.user.id,
      body: req.body
    });

    const { amount, phone, message } = req.body;
    
    if (!amount || !phone) {
      console.log('‚ùå Missing required fields:', { amount, phone });
    }
    
    // Validate amount
    if (isNaN(amount) || amount <= 0) {
      console.log('‚ùå Invalid amount:', amount);
    }
    
    // Get a random HR manager from admin_users table
    console.log('üîç Fetching HR manager for method3...');
    const [hrManagers] = await pool.query(`
      SELECT id, name, mobile as phone FROM admin_users 
      WHERE verified = 1 AND role != 'CEO' AND rejected = 0
      ORDER BY RAND() 
      LIMIT 1
    `);
    
    console.log('üìä HR managers query result:', hrManagers);
    
    if (!hrManagers.length) {
      console.log('‚ùå No HR managers found for method3');
      return res.status(500).json({ error: 'No HR managers available at the moment' });
    }
    
    const hrManager = hrManagers[0];
    console.log('‚úÖ HR manager found:', hrManager.name);
    
    // Generate transaction number
    const transactionNumber = 'TXN' + Date.now() + Math.random().toString(36).substr(2, 5).toUpperCase();
    console.log('üî¢ Generated transaction number:', transactionNumber);
    
    // Create payment record with HR assignment
    console.log('üíæ Creating payment record...');
    const [paymentResult] = await pool.query(
      'INSERT INTO payments (user_id, amount, status, payment_method, hr_manager_id, transaction_number, user_phone, verification_message) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
      [req.user.id, amount, 'pending', 'hr_manager_method3', hrManager.id, transactionNumber, phone, message || '']
    );
    
    const paymentId = paymentResult.insertId;
    console.log('‚úÖ Payment record created with ID:', paymentId);
    
    // Create copy message
    const copyMessage = `Recharge Request - Transaction: ${transactionNumber} - Amount: KES ${amount} - Phone: ${phone}`;
    
    // Notify user
    try {
      await pushNotification(req.user.id, "Recharge request submitted. HR manager will process your payment.", "info");
      console.log('‚úÖ User notification sent');
    } catch (notificationError) {
      console.log('‚ö†Ô∏è User notification failed:', notificationError.message);
    }
    
    // Notify HR manager with verification message
    try {
      const notificationMessage = message 
        ? `New recharge request (Method 3): KES ${amount} from user ${req.user.id}. Verification message: "${message}"`
        : `New recharge request (Method 3): KES ${amount} from user ${req.user.id}`;
      await pushNotification(hrManager.id, notificationMessage, "recharge_request");
      console.log('‚úÖ HR manager notification sent');
    } catch (notificationError) {
      console.log('‚ö†Ô∏è HR manager notification failed:', notificationError.message);
    }
    
    console.log('üéâ Recharge method 3 completed successfully');
    res.json({ 
      success: true,
      hrName: hrManager.name,
      transactionNumber: transactionNumber,
      copyMessage: copyMessage,
      paymentId: paymentId,
      message: "Payment is being processed. It will reflect soon on your wallet.",
      payment_method: "HR Manager Assignment (Method 3)"
    });
  } catch (error) {
    console.error('Error processing recharge method 3:', error);
    res.status(500).json({ error: 'Recharge failed' });
  }
});

router.post('/recharge-method4', simpleAuth, async (req, res) => {
  try {
    console.log('üîç Recharge method 4 request received:', {
      userId: req.user.id,
      body: req.body
    });

    const { amount, phone, message } = req.body;
    
    if (!amount || !phone) {
      console.log('‚ùå Missing required fields:', { amount, phone });
    }
    
    // Validate amount
    if (isNaN(amount) || amount <= 0) {
      console.log('‚ùå Invalid amount:', amount);
    }
    
    // Get a random HR manager from admin_users table
    console.log('üîç Fetching HR manager for method4...');
    const [hrManagers] = await pool.query(`
      SELECT id, name, mobile as phone FROM admin_users 
      WHERE verified = 1 AND role != 'CEO' AND rejected = 0
      ORDER BY RAND() 
      LIMIT 1
    `);
    
    console.log('üìä HR managers query result:', hrManagers);
    
    if (!hrManagers.length) {
      console.log('‚ùå No HR managers found for method4');
      return res.status(500).json({ error: 'No HR managers available at the moment' });
    }
    
    const hrManager = hrManagers[0];
    console.log('‚úÖ HR manager found:', hrManager.name);
    
    // Generate transaction number
    const transactionNumber = 'TXN' + Date.now() + Math.random().toString(36).substr(2, 5).toUpperCase();
    console.log('üî¢ Generated transaction number:', transactionNumber);
    
    // Create payment record with HR assignment
    console.log('üíæ Creating payment record...');
    const [paymentResult] = await pool.query(
      'INSERT INTO payments (user_id, amount, status, payment_method, hr_manager_id, transaction_number, user_phone, verification_message) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
      [req.user.id, amount, 'pending', 'hr_manager_method4', hrManager.id, transactionNumber, phone, message || '']
    );
    
    const paymentId = paymentResult.insertId;
    console.log('‚úÖ Payment record created with ID:', paymentId);
    
    // Create copy message
    const copyMessage = `Recharge Request - Transaction: ${transactionNumber} - Amount: KES ${amount} - Phone: ${phone}`;
    
    // Notify user
    try {
      await pushNotification(req.user.id, "Recharge request submitted via Method 4. HR manager will process your payment.", "info");
      console.log('‚úÖ User notification sent');
    } catch (notificationError) {
      console.log('‚ö†Ô∏è User notification failed:', notificationError.message);
    }
    
    // Notify HR manager with verification message
    try {
      const notificationMessage = message 
        ? `New recharge request (Method 4): KES ${amount} from user ${req.user.id}. Verification message: "${message}"`
        : `New recharge request (Method 4): KES ${amount} from user ${req.user.id}`;
      await pushNotification(hrManager.id, notificationMessage, "recharge_request");
      console.log('‚úÖ HR manager notification sent');
    } catch (notificationError) {
      console.log('‚ö†Ô∏è HR manager notification failed:', notificationError.message);
    }
    
    console.log('üéâ Recharge method 4 completed successfully');
    res.json({ 
      success: true,
      hrName: hrManager.name,
      transactionNumber: transactionNumber,
      copyMessage: copyMessage,
      paymentId: paymentId,
      message: "Payment is being processed. It will reflect soon on your wallet.",
      payment_method: "HR Manager Assignment (Method 4)"
    });
  } catch (error) {
    console.error('Error processing recharge method 4:', error);
    res.status(500).json({ error: 'Recharge failed' });
  }
});

module.exports = router;
